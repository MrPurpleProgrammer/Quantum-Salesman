[{"C:\\Life\\Development\\Quantum Salesman\\client\\src\\index.js":"1","C:\\Life\\Development\\Quantum Salesman\\client\\src\\reportWebVitals.js":"2","C:\\Life\\Development\\Quantum Salesman\\client\\src\\App.js":"3","C:\\Life\\Development\\Quantum Salesman\\client\\src\\components\\TSPGeoCalc.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":229,"mtime":1615113530775,"results":"8","hashOfConfig":"6"},{"size":19031,"mtime":1615144199905,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5lxxo",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Life\\Development\\Quantum Salesman\\client\\src\\index.js",[],["20","21"],"C:\\Life\\Development\\Quantum Salesman\\client\\src\\reportWebVitals.js",[],"C:\\Life\\Development\\Quantum Salesman\\client\\src\\App.js",[],"C:\\Life\\Development\\Quantum Salesman\\client\\src\\components\\TSPGeoCalc.js",["22","23","24","25"],"import { useRef, useState, useEffect } from 'react'\r\nimport mapboxgl from 'mapbox-gl'; // or \"const mapboxgl = require('mapbox-gl');\"\r\nimport '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css'\r\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\r\nimport * as turf from '@turf/turf'\r\nimport $, { map } from 'jquery';\r\nimport logo from '../assets/logo.svg'\r\n\r\n// @ts-ignore\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\n// Change this to set the app to your location \r\n// This value is used for the map center, the search proximity bias, and the store location\r\nfunction TSPGeoCalc() {\r\n    const [storeLocation, setStoreLocation] = useState([0, 0]);\r\n    const [mapState, setMapState] = useState(null);\r\n    const [geocoderState, setGeoCoderState] = useState(null);\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAP_API_KEY;\r\n    let mapContainer = useRef(null)\r\n    let mapGl = useRef(null);\r\n    const transformRequest = (url) => {\r\n        const hasQuery = url.indexOf(\"?\") !== -1;\r\n        const suffix = hasQuery ? \"&pluginName=lunchboxOptimization\" : \"?pluginName=lunchboxOptimization\";\r\n        return {\r\n            url: url + suffix\r\n        }\r\n    }\r\n    // This object will hold all the delivery stops, starting with the store location\r\n    let orders = {\r\n        type: \"FeatureCollection\",\r\n        features: [{\r\n            type: 'Feature',\r\n            properties: {\r\n                address: 'Home',\r\n                accepted: 'home',\r\n            },\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [],//storeLocation\r\n            }\r\n        }\r\n        ]\r\n    };\r\n    let iso = {};\r\n    // UI elements\r\n    // Note the parameters to exclude animation and markers, and to set the proximity bias\r\n    // Proximity bias helps the API return more relevant local results\r\n    const setOverview = function (route) {\r\n        const trip = route.trips[0];\r\n        const waypoints = route.waypoints;\r\n        // Set some basic stats for the route in the sidebar\r\n        document.getElementById('stops').innerText = `${route.waypoints.length.toFixed(0)}`;\r\n        document.getElementById('distance').innerText = `${(trip.distance / 1609.344).toFixed(1)}`;\r\n        document.getElementById('duration').innerText = `${(trip.duration / 60).toFixed(0)}`;\r\n        document.getElementById('divDirectionsRoute').innerText = '';\r\n\r\n        // Add the delivery addresses and turn-by-turn instructions to the sidebar for each leg of the trip\r\n        trip.legs.forEach((leg, i) => {\r\n            let directionDiv = document.createElement('div');\r\n            directionDiv.id = 'divTrip_' + i\r\n            let directionHeader = document.createElement('h1');\r\n            let directionUl = document.createElement('ul');\r\n            directionUl.id = 'ulTrip_' + i\r\n            // We want the destination address when we depart, hence index + 1\r\n            if (i < trip.legs.length - 1) {\r\n                const nextDelivery = waypoints.find(({ waypoint_index }) => waypoint_index === i + 1);\r\n                directionHeader.innerHTML = `Delivery to ${nextDelivery.address}`;\r\n            } else {\r\n                // We're outside the range of deliveries, so let's go home\r\n                directionHeader.innerHTML = `Return Home`;\r\n            }\r\n            document.getElementById('divDirectionsRoute').appendChild(directionDiv);\r\n            document.getElementById(directionDiv.id).appendChild(directionHeader);\r\n            document.getElementById(directionDiv.id).appendChild(directionUl);\r\n            // add the TBT instructions for this leg\r\n            leg.steps.forEach((step) => {\r\n                let directionStep = document.createElement('li');\r\n                directionStep.innerText = step.maneuver.instruction;\r\n                document.getElementById(directionUl.id).appendChild(directionStep);\r\n            });\r\n        });\r\n    }\r\n    const setTripLine = function (trip) {\r\n        const routeLine = {\r\n            type: 'FeatureCollection',\r\n            features: [{\r\n                properties: {},\r\n                geometry: trip.geometry,\r\n            }],\r\n        };\r\n\r\n        mapGl.current.getSource('route').setData(routeLine);\r\n    }\r\n    const setStops = function (stops) {\r\n        const deliveries = {\r\n            type: 'FeatureCollection',\r\n            features: [\r\n            ],\r\n        };\r\n\r\n        stops.forEach((stop) => {\r\n            const delivery = {\r\n                properties: {\r\n                    name: stop.address,\r\n                    stop_number: stop.waypoint_index\r\n                },\r\n                geometry: {\r\n                    type: 'Point',\r\n                    coordinates: stop.location,\r\n                },\r\n            };\r\n            deliveries.features.push(delivery);\r\n        });\r\n        mapGl.current.getSource('deliveries').setData(deliveries);\r\n    }\r\n    const getDeliveryRoute = function () {\r\n        // Filter out only the orders that have been accepted\r\n        if (orders.features.length > 12) {\r\n            let lastItem = orders.features[orders.features.length - 1]\r\n            orders.features[11] = lastItem;\r\n            orders.features.length = 12\r\n            setAlert(\"trips\", orders);\r\n        }\r\n        const deliverable = orders.features.filter(point => point.properties.accepted);\r\n        // Once there are 2 deliveries, get the delivery route\r\n        if (deliverable.length > 1) {\r\n            const coords = [];\r\n            deliverable.forEach((delivery) => {\r\n                coords.push(delivery.geometry.coordinates.join(','));\r\n            });\r\n            const approachParam = ';curb';\r\n            let optimizeUrl = 'https://api.mapbox.com/optimized-trips/v1/';\r\n            optimizeUrl += 'mapbox/driving-traffic/';\r\n            optimizeUrl += coords.join(';');\r\n            optimizeUrl += '?access_token=' + mapboxgl.accessToken;\r\n            optimizeUrl += '&geometries=geojson&overview=full&steps=true';\r\n            optimizeUrl += '&approaches=' + approachParam.repeat(coords.length - 1);\r\n\r\n            fetch(optimizeUrl).then((res) => res.json()).then((res) => {\r\n                // Add the original address text to the waypoints\r\n                res.waypoints.forEach((waypoint, i) => {\r\n                    waypoint.address = waypoint[i] === 0 ? 'Start' : deliverable[i].properties.address;\r\n                });\r\n\r\n                // Add the distance, duration, and turn-by-turn instructions to the sidebar\r\n                setOverview(res);\r\n\r\n                // Draw the route and stops on the map\r\n                setTripLine(res.trips[0]);\r\n                setStops(res.waypoints);\r\n            });\r\n        };\r\n    };\r\n    const checkAddressInServiceArea = function (address) {\r\n        if (address) {\r\n            // Save the address text from the response\r\n            const addressText = address.place_name;\r\n\r\n            const order = {\r\n                type: 'Feature',\r\n                properties: {\r\n                    address: addressText,\r\n                },\r\n                geometry: {\r\n                    type: 'Point',\r\n                    coordinates: address.geometry.coordinates\r\n                }\r\n            };\r\n\r\n            // Returns true if the point is in the isochrone\r\n            const status = turf.booleanPointInPolygon(order, iso.features[0]);\r\n            if (status === false) setAlert('bounds');\r\n            order.properties.accepted = status;\r\n\r\n            // All orders get added to the map, where they are colored by accepted status\r\n            orders.features.push(order);\r\n            mapGl.current.getSource('orders').setData(orders);\r\n            getDeliveryRoute();\r\n        }\r\n    };\r\n    const getIso = function (coords) {\r\n        if (mapGl.current !== null) {\r\n            let isoUrl = 'https://api.mapbox.com/isochrone/v1/mapbox/driving/' + coords.join(',') + '.json';\r\n            isoUrl += '?contours_minutes=30&polygons=true&access_token=' + mapboxgl.accessToken;\r\n            fetch(isoUrl).then(res => res.json()).then(res => {\r\n                iso = res;\r\n                mapGl.current.getSource(\"iso\").setData(iso);\r\n                return iso;\r\n            });\r\n        }\r\n    };\r\n    const getCurrentLocation = async () => {\r\n        return new Promise((resolve, reject) => {\r\n            if (navigator.geolocation) {\r\n                let currentLoc = navigator.geolocation.getCurrentPosition(function (position) {\r\n                    setStoreLocation([position.coords.longitude, position.coords.latitude])\r\n                    resolve([position.coords.longitude, position.coords.latitude])\r\n                }, (err) => {\r\n                    console.log(err);\r\n                    setStoreLocation([-118.2437, 34.0522])\r\n                    resolve([-118.2437, 34.0522]);\r\n                }, { timeout: 10000, enableHighAccuracy: true });\r\n            }\r\n            else {\r\n                setStoreLocation([-118.2437, 34.0522])\r\n                resolve([-118.2437, 34.0522]);\r\n            }\r\n        });\r\n    };\r\n    function getReverseGeocode(feature) {\r\n        var lat = feature.lngLat.lat;\r\n        var lng = feature.lngLat.lng;\r\n        var url = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\" + lng + \"%2C\" + lat + \".json?access_token=\" + mapboxgl.accessToken; //\"https://api.mapbox.com/geocoding/v5/mapbox.places/\" + lat + \",\" + lng + \".json?access_token=\" + mapboxgl.accessToken + \"&autocomplete=true&types=address\";\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                checkAddressInServiceArea(res.features[0], mapGl.current)\r\n            });\r\n    }\r\n    function setAlert(state, o) {\r\n        if (state === \"home\") {\r\n            $('.homeInfo').addClass('modalEnter');\r\n        }\r\n        if (state === \"trips\") {\r\n            $('.maxRouteLimit').addClass('modalEnter');\r\n\r\n        }\r\n        if (state === \"bounds\") {\r\n            $('.outsideBounds').addClass('modalEnter');\r\n        }\r\n    }\r\n    function addDelieverySources_Layers(map) {\r\n        map.addSource('route', {\r\n            type: 'geojson',\r\n            data: {\r\n                type: 'FeatureCollection',\r\n                features: [\r\n                ],\r\n            },\r\n        });\r\n\r\n        map.addLayer({\r\n            id: 'routeLayer',\r\n            type: 'line',\r\n            source: 'route',\r\n            layout: {},\r\n            paint: {\r\n                'line-color': '#E9E9E9',\r\n                'line-width': 6,\r\n                \"line-opacity\": 0.4,\r\n            },\r\n        }, 'road-label-navigation');\r\n\r\n        map.addLayer({\r\n            id: 'routeArrows',\r\n            source: 'route',\r\n            type: 'symbol',\r\n            layout: {\r\n                'symbol-placement': 'line',\r\n                'text-field': '→',\r\n                'text-rotate': 0,\r\n                'text-keep-upright': false,\r\n                'symbol-spacing': 30,\r\n                'text-size': 15,\r\n                'text-offset': [0, -0.1],\r\n            },\r\n            paint: {\r\n                'text-color': 'white',\r\n                'text-halo-color': 'white',\r\n                'text-halo-width': 1,\r\n            },\r\n        }, 'road-label-navigation');\r\n\r\n        map.addSource(\"deliveries\", {\r\n            type: \"geojson\",\r\n            data: {\r\n                type: \"FeatureCollection\",\r\n                features: [\r\n                ]\r\n            }\r\n        });\r\n\r\n        map.addSource(\"orders\", {\r\n            type: \"geojson\",\r\n            data: orders\r\n        });\r\n\r\n        map.addLayer({\r\n            \"id\": \"ordersLayer\",\r\n            \"type\": \"circle\",\r\n            \"source\": \"orders\",\r\n            \"layout\": {},\r\n            \"paint\": {\r\n                \"circle-radius\": 5,\r\n                \"circle-opacity\": 0.7,\r\n                \"circle-color\": [\r\n                    'case',\r\n                    ['==', ['get', 'accepted'], true],\r\n                    'white',\r\n                    ['==', ['get', 'accepted'], 'home'],\r\n                    'green',\r\n                    'red'\r\n                ],\r\n                \"circle-stroke-color\": \"white\",\r\n                \"circle-stroke-width\": 2,\r\n                \"circle-stroke-opacity\": 0.2\r\n            }\r\n        }, \"road-label-navigation\");\r\n\r\n        map.addLayer({\r\n            \"id\": \"deliveriesLayer\",\r\n            \"type\": \"circle\",\r\n            \"source\": \"deliveries\",\r\n            \"layout\": {},\r\n            \"paint\": {\r\n                \"circle-color\": 'white',\r\n                \"circle-stroke-color\": '#444',\r\n                \"circle-radius\": 13\r\n            }\r\n        }, \"road-label-navigation\");\r\n\r\n        map.addLayer({\r\n            \"id\": \"deliveriesLabels\",\r\n            \"type\": \"symbol\",\r\n            \"source\": \"deliveries\",\r\n            \"layout\": {\r\n                'text-field': ['get', 'stop_number']\r\n            },\r\n            \"paint\": {\r\n                \"text-color\": '#444'\r\n            }\r\n        });\r\n    }\r\n    function initializeMap(setMapState, mapContainer) {\r\n        let radius = 5;\r\n        let opacity = 0.1;\r\n        const map = new mapboxgl.Map({\r\n            container: mapContainer,\r\n            style: 'mapbox://styles/mrpurple/ckkklxrzx1j0r17o9n1p0bknn?optimize=true',\r\n            transformRequest: transformRequest,\r\n            maxPitch: 70,\r\n        });\r\n        const geocoder = new MapboxGeocoder({\r\n            accessToken: mapboxgl.accessToken,\r\n            mapboxgl: mapboxgl,\r\n            flyTo: true,\r\n            marker: true,\r\n            proximity: storeLocation,\r\n        });\r\n        map.on('click', e => {\r\n            getReverseGeocode(e)\r\n            map.setMinZoom(8);\r\n        })\r\n        map.on(\"load\", () => {\r\n            map.addSource(\"iso\", {\r\n                type: \"geojson\",\r\n                data: {\r\n                    type: \"FeatureCollection\",\r\n                    features: [\r\n                    ]\r\n                }\r\n            });\r\n\r\n            map.addLayer({\r\n                \"id\": \"isoLayer\",\r\n                \"type\": \"fill\",\r\n                \"source\": \"iso\",\r\n                \"layout\": {},\r\n                \"paint\": {\r\n                    \"fill-color\": \"purple\",\r\n                    \"fill-opacity\": 0,\r\n                }\r\n            }, \"road-label-navigation\");\r\n            addDelieverySources_Layers(map)\r\n            setInterval(() => {\r\n                map.setPaintProperty('ordersLayer', 'circle-stroke-width', radius);\r\n                radius = ++radius % 5;\r\n                map.setPaintProperty('ordersLayer', 'circle-stroke-opacity', opacity);\r\n                opacity = (++opacity + 0.6) % 1\r\n            }, 150);\r\n            // Do this when the geocoder returns a result\r\n            geocoder.on(\"result\", ev => {\r\n                map.fire('click', { lngLat: { lng: ev.result.geometry.coordinates[0], lat: ev.result.geometry.coordinates[1] } })\r\n            });\r\n            getCurrentLocation().then(res => {\r\n                map.flyTo({\r\n                    center: res, zoom: 13, pitch: 65,\r\n                    easing: function (t) {\r\n                        return t;\r\n                    },\r\n                    essential: true\r\n                })\r\n                orders.features[0].geometry.coordinates = res\r\n                getIso(res);\r\n                setMapState(map);\r\n                map.getSource('orders').setData(orders)\r\n                setGeoCoderState(geocoder);\r\n                $('#geoSearch').append(geocoder.onAdd(mapState));\r\n                setAlert('home');\r\n            })\r\n        });\r\n        return { map: map, geocoder: geocoder }\r\n    }\r\n    useEffect(() => {\r\n        if (!mapState) {\r\n            let obj = initializeMap(setMapState, mapContainer);\r\n            mapGl.current = obj.map;\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className=\"parentMapContainer\" >\r\n            <div className=\"map-overlay-container\">\r\n                <div className=\"map-overlay\">\r\n                    <div className=\"overlayHeader\">\r\n                        <div id=\"divLogo\" className=\"logoContainer headerContent\">\r\n                            <img src={logo} alt='logo' />\r\n                            <h1>Quantum Salesman</h1>\r\n                        </div>\r\n                        <p className=\"instructions\">Click on a location on the map or search for an address to begin planning your delivery route.</p>\r\n                    </div>\r\n                    <div id=\"geoSearch\"></div>\r\n                    <div id=\"divRouteContent\" className=\"routeContent\">\r\n                        <div id=\"overviewContent\" className=\"overviewTextBox\">\r\n                            <div>\r\n                                <h1 id=\"stops\">0</h1>\r\n                                <p>Stops</p>\r\n                            </div>\r\n                            <div>\r\n                                <h1 id=\"duration\">0</h1>\r\n                                <p>Minutes</p>\r\n                            </div>\r\n                            <div>\r\n                                <h1 id=\"distance\">0</h1>\r\n                                <p>Miles</p>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"divDirectionsRoute\" className=\"routeDetails\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id=\"divAlerts\" className='alertsContainer'>\r\n                <div className=\"modal homeInfo\">\r\n                    <h1>The default starting point is your current location, and the route will plan a round trip back to your original position.</h1>\r\n                    <i onClick={() => $('.homeInfo').removeClass('modalEnter')} className=\"far fa-times-circle\"></i>\r\n                </div>\r\n                <div className=\"modal maxRouteLimit\">\r\n                    <h1>You can only plan out a route of 12 stops at a time. Refresh the page to replan out your delivery route.</h1>\r\n                    {/* <button onClick={() => {resetRoute()}}>Reset Delivery Route</button> */}\r\n                    <i onClick={() => $('.maxRouteLimit').removeClass('modalEnter')} className=\"far fa-times-circle\"></i>\r\n                </div>\r\n                <div className=\"modal outsideBounds\">\r\n                    <h1>You've selected a location that is out of bounds. We do this to optimize the algorithm and ensure quicker load speeds. Try a closer location.</h1>\r\n                    <i onClick={() => $('.outsideBounds').removeClass('modalEnter')} className=\"far fa-times-circle\"></i>\r\n                </div>\r\n            </div>\r\n            <div id='divMap' ref={el => mapContainer = el} className='mapContainer' />\r\n            <pre id=\"coordinates\" className=\"coordinates\"></pre>\r\n            <div id=\"divDirections\" className=\"directionsContainer\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TSPGeoCalc",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":7,"column":13,"nodeType":"32","messageId":"33","endLine":7,"endColumn":16},{"ruleId":"30","severity":1,"message":"34","line":18,"column":12,"nodeType":"32","messageId":"33","endLine":18,"endColumn":25},{"ruleId":"30","severity":1,"message":"35","line":196,"column":21,"nodeType":"32","messageId":"33","endLine":196,"endColumn":31},{"ruleId":"36","severity":1,"message":"37","line":410,"column":8,"nodeType":"38","endLine":410,"endColumn":10,"suggestions":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'map' is defined but never used.","Identifier","unusedVar","'geocoderState' is assigned a value but never used.","'currentLoc' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initializeMap' and 'mapState'. Either include them or remove the dependency array.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [initializeMap, mapState]",{"range":"45","text":"46"},[15940,15942],"[initializeMap, mapState]"]